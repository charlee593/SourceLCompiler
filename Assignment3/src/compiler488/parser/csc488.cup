// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.

import compiler488.ast.ASTList;

import compiler488.ast.Printable;
import compiler488.ast.Readable;

import compiler488.ast.stmt.AssignStmt;
import compiler488.ast.stmt.Program;
import compiler488.ast.stmt.Scope;
import compiler488.ast.stmt.ExitStmt;
import compiler488.ast.stmt.GetStmt;
import compiler488.ast.stmt.IfStmt;
import compiler488.ast.stmt.LoopStmt;
import compiler488.ast.stmt.LoopingStmt;
import compiler488.ast.stmt.ProcedureCallStmt;
import compiler488.ast.stmt.PutStmt;
import compiler488.ast.stmt.Stmt;
import compiler488.ast.stmt.WhileDoStmt;

import compiler488.ast.decl.ArrayDeclPart;
import compiler488.ast.decl.Declaration;
import compiler488.ast.decl.DeclarationPart;
import compiler488.ast.decl.MultiDeclarations;
import compiler488.ast.decl.RoutineDecl;
import compiler488.ast.decl.ScalarDecl;
import compiler488.ast.decl.ScalarDeclPart;

import compiler488.ast.expn.AnonFuncExpn;
import compiler488.ast.expn.ArithExpn;
import compiler488.ast.expn.BinaryExpn;
import compiler488.ast.expn.BoolConstExpn;
import compiler488.ast.expn.BoolExpn;
import compiler488.ast.expn.CompareExpn;
import compiler488.ast.expn.ConstExpn;
import compiler488.ast.expn.EqualsExpn;
import compiler488.ast.expn.Expn;
import compiler488.ast.expn.FunctionCallExpn;
import compiler488.ast.expn.IdentExpn;
import compiler488.ast.expn.IntConstExpn;
import compiler488.ast.expn.NotExpn;
import compiler488.ast.expn.SkipConstExpn;
import compiler488.ast.expn.SubsExpn;
import compiler488.ast.expn.TextConstExpn;
import compiler488.ast.expn.UnaryExpn;
import compiler488.ast.expn.UnaryMinusExpn;

import compiler488.ast.type.BooleanType;
import compiler488.ast.type.IntegerType;
import compiler488.ast.type.Type;

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;
	
    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
	     */
   
            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
            else
               st += " at end of input " ;
           }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}
   
    /** Override the report_fatal_error method to use the report_error method. */
    /** @throws SyntaxErrorException						*/
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException
	{
        report_error (message, info);
        throw new SyntaxErrorException (lastError); 
	}
   
:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2009/2010 

// Terminals returned by the scanner with no value attached.  
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal 	BOOLEAN,INTEGER,FUNCTION,PROCEDURE	;
terminal	BEGIN,	DO,	ELSE,	END,	EXIT	;
terminal	IF,	RETURN,	LOOP,	PUT,	GET	;
terminal	THEN,	WHILE,	SKIP,	YIELDS, WHEN	;

// Special-character terminals, no value attached
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY	;
terminal	EQUAL,	GREATER, LESS,	COMMA,  DOT	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

// Non-terminals that have a value.
// nonterminal type  nameList ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;		// Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.

nonterminal Program program;
nonterminal Scope scope;
nonterminal Stmt statement;
nonterminal Declaration declaration;
nonterminal MultiDeclarations variablenames;
nonterminal Printable output;
nonterminal Type type;
nonterminal ASTList<Expn> arguments;
nonterminal ScalarDecl parameters;
nonterminal ScalarDeclPart variable;
nonterminal Expn expression;
nonterminal DeclarationPart variablename;
nonterminal ASTList<Stmt> declarationsAndStatements;
nonterminal ASTList<Readable> inputs;
nonterminal ASTList<Printable> outputs;
//########################################
nonterminal bound;
//######################################## 
nonterminal generalBound; 
nonterminal FunctionCallExpn procedureCall;
nonterminal ScalarDecl parameter;
nonterminal Expn conjunction;
nonterminal UnaryMinusExpn negation;
nonterminal CompareExpn compareExpn;
nonterminal ArithExpn arithExpn;
nonterminal ArithExpn term;
nonterminal ArithExpn factor;
nonterminal Expn primary;
nonterminal ConstExpn constant;

start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program		::=	scope:scope 
			{: RESULT = new Program(scope); :};		// the main program

scope		::=	BEGIN declarationsAndStatements:stmts END  	// non empty scope
			{: RESULT = new Scope(stmts); :}///////////////////////////////////////////////
		|	BEGIN END				// empty scope
			{: RESULT = new Scope(); :}
		;

//  sequence of arbitrarily intermixed declarations and statements
declarationsAndStatements	::=	statement:stmt
					{: RESULT = new ASTList<Stmt>(stmt); :}
				|	declaration:decl
					{: RESULT = new ASTList<Stmt>(decl); :}
				|	declarationsAndStatements:head statement:stmt
					{: head.addLast(stmt); RESULT = head; :}
				|	declarationsAndStatements:head declaration:decl
					{: head.addLast(decl); RESULT = head; :}
				;

statement	::=	variable LESS EQUAL expression				// assignment statement
		|	IF expression THEN declarationsAndStatements END 	// if statements
		|	IF expression THEN declarationsAndStatements ELSE declarationsAndStatements END
		|	WHILE expression DO declarationsAndStatements END	// while statement
		|	LOOP declarationsAndStatements END			// loop statement
		|	EXIT							// exit statements
		|	EXIT WHEN expression
		|	RETURN 							// return statements
		|	RETURN L_PAREN expression R_PAREN
		|	PUT outputs						// input/output statments
		|	GET  inputs
		|	procedureCall						// procedure call
		|	scope							// embedded scope
		;

procedureCall	::=	IDENT 					// call procedure with no parameters
		|	IDENT L_PAREN arguments R_PAREN  	// call procedure with parameters
		;

declaration	::=	type variablenames 			// declare scalar/array variables
		|	type FUNCTION IDENT scope		// declare function
		|	type FUNCTION  IDENT L_PAREN parameters R_PAREN scope
		|	PROCEDURE IDENT scope			//  declare procedure
		|	PROCEDURE IDENT L_PAREN parameters R_PAREN scope
		;

variablenames	::=	variablename  				// list of variables being declared
		|	variablenames COMMA variablename 
		;

variablename	::=	IDENT 						// scalar variable
		|	IDENT L_SQUARE bound R_SQUARE			// one dimensional array variable
		|	IDENT L_SQUARE bound COMMA bound  R_SQUARE	// two dimensional array variable
		;

bound		::=	INTCONST					// positive array bound
		|	generalBound DOT DOT generalBound		// positive or negative array bounds
		;
		
generalBound	::=	INTCONST		// positive array bound
		|	MINUS INTCONST		// negative array bound
		;

type		::=	INTEGER			// integer type
		|	BOOLEAN			// boolean type
		;

outputs		::=	output			// list of output expressions
		|	outputs COMMA output
		;

output		::=	expression		// integer expression
		|	TEXTCONST		// text constant
		|	SKIP			// skip pseudo constant
		;

inputs		::=	variable		// list of variables being read into
		|	inputs COMMA variable
		;

arguments	::=	expression			// list of function/procedure arguments
		|	arguments COMMA expression
		;

parameters	::=	parameter			// list of function/procedure formal parameters
		|	parameters COMMA parameter
		;

parameter	::=	type IDENT ;			// declare one parameter

expression	::=	conjunction			// disjunctions, associate left-to-right
		|	expression OR conjunction
		;

conjunction	::=	negation			// conjunctions, associate left-to-right
		|	conjunction AND negation
		;

negation	::=	compareExpn 			// negations
		|	NOT negation
		;

compareExpn	::=	arithExpn			// comparisons, do not associate
		|	arithExpn EQUAL arithExpn
		| 	arithExpn NOT EQUAL arithExpn
		|	arithExpn LESS arithExpn
		|	arithExpn LESS EQUAL arithExpn
		|	arithExpn GREATER arithExpn
		|	arithExpn GREATER EQUAL arithExpn
		;

arithExpn	::=	term				// expressions, associate + , - left-to-right
		|	arithExpn  PLUS  term
		|	arithExpn  MINUS term
		;

term		::=	factor				// terms, associate * , /   left-to-right
		|	term TIMES factor
		|	term DIVIDE factor
		;

factor		::=	primary				// unary minus
		|	MINUS factor
		;

primary		::=	constant				// integer or boolean constant
		|	variable				// scalar, array variable or function call
		|	IDENT L_PAREN arguments R_PAREN 	// function call
		| 	L_PAREN  expression  R_PAREN		// parenthesized expression
		|	L_CURLEY declarationsAndStatements YIELDS expression R_CURLEY	// anon function
		;

constant	::=	INTCONST	// integer constant
		|	TRUE		// constant true
		|	FALSE		// constant false
		;

variable	::=	IDENT					// scalar variable or function call
		|	IDENT L_SQUARE expression R_SQUARE	// element of a 1-D  array
		|	IDENT L_SQUARE expression COMMA expression R_SQUARE	// element of a 2-D array
		;


