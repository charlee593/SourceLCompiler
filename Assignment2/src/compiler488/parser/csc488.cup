// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;    // Must always import this.

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

  String lastError;
  
    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
  {
  String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol)
      {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

      /* s.left is supposed to hold the line number of the error.
       * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
       */
   
            if (s.left >= 0)        // Check line number.
    {
                st += " in line " + (s.left + 1);
                if (s.right >= 0)     // Check column number.
                    st += ", column " + (s.right + 1);
    }
            else
               st += " at end of input " ;
           }
      st += ": " + message;
        System.err.println (st);
        lastError = st;
  }
   
    /** Override the report_fatal_error method to use the report_error method. */
    public void report_fatal_error (String message, Object info) 
  {
        report_error (message, info);
  }
   
:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2009/2010 

// Terminals returned by the scanner with no value attached.  
terminal  AND,  OR, NOT,  TRUE, FALSE ;
terminal  BOOLEAN,INTEGER,FUNCTION,PROCEDURE  ;
terminal  BEGIN,  DO, ELSE, END,  EXIT  ;
terminal  IF, RETURN, LOOP, PUT,  GET ;
terminal  THEN, WHILE,  SKIP, YIELDS, WHEN  ;

// Special-character terminals, no value attached
terminal  L_PAREN ,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY ;
terminal  EQUAL,  GREATER,LESS, COMMA,  DOT ;
terminal  PLUS, MINUS,  TIMES,  DIVIDE  ;

// Terminals returned by the scanner with a value.
terminal String  IDENT  ;
terminal Integer INTCONST ;
terminal String  TEXTCONST  ;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal   program, scope;
nonterminal   bound, generalBound;
nonterminal   variable, integer, type, expression;
nonterminal   functionname, procedurename, parametername;
nonterminal   atom, L0exp, L1exp, L2exp, L3exp, L4exp, L5exp, L6exp;
nonterminal   statement, statement_list;
nonterminal   output, output_list, input_list;
nonterminal   var_declr, var_declr_list;
nonterminal   parameter, parameter_list;
nonterminal   argument_list;

/**********************************************************

The nonterminals from your grammar go here

***********************************************************/

// Non-terminals that have a value.
// nonterminal type  nameList ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;    // Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program         ::=     scope;    // the main program

/*****************************************************************************

  YOUR CAREFULLY CRAFTED GRAMMAR FOR THE CSC488S SOURCE LANGUAGE

    GOES HERE

****************************************************************************/

// A single statement

statement       ::=     variable LESS EQUAL expression                                  // Assignment
                |       IF expression THEN statement_list END                           // If statement without Else
                |       IF expression THEN statement_list ELSE statement_list END       // If statement with Else
                |       WHILE expression DO statement_list END                          // While loop
                |       LOOP statement_list END                                         // Infinite loop
                |       EXIT                                                            // Exit from loop
                |       EXIT WHEN expression                                            // Conditional exit from loop
                |       RETURN L_PAREN expression R_PAREN                               // Return from a function
                |       RETURN                                                          // Return from a procedure
                |       PUT output_list                                                 // Print to standard output
                |       GET input_list                                                  // Read from standard input
                |       procedurename                                                   // Procedure call
                |       procedurename L_PAREN argument_list R_PAREN                     // Function call
                |       scope                                                           // Nested scope
                |       type var_declr_list                                             // Variable declaration
                |       type FUNCTION functionname scope                                // Function declaration without parameters
                |       type FUNCTION functionname L_PAREN parameter_list R_PAREN scope // Function declaration with parameters
                |       PROCEDURE procedurename scope                                   // Procedure declaration without parameters
                |       PROCEDURE procedurename L_PAREN parameter_list R_PAREN scope;   // Procedure declaration with parameters

// List of whitespace-separated statements

statement_list  ::=     statement
                |       statement_list statement;

// Variable declaration

var_declr       ::=     IDENT                                                           // Scalar variable declaration
                |       IDENT L_SQUARE bound R_SQUARE                                   // One-dimensional array declaration
                |       IDENT L_SQUARE bound COMMA bound R_SQUARE;                      // Two-dimensional array declaration

// List of comma-separated variable declarations

var_declr_list  ::=     var_declr_list COMMA var_declr                               
                |       var_declr;

variable        ::=     IDENT                                                           // Access to scalar variable
                |       IDENT L_SQUARE expression R_SQUARE                              // Access to an element in a one-dimensional array
                |       IDENT L_SQUARE expression COMMA expression R_SQUARE;            // Access to an element in a two-dimensional array

bound           ::=     integer
                |       generalBound DOT DOT generalBound;

generalBound    ::=     integer
                |       MINUS integer;

scope           ::=     BEGIN statement_list END
                |       BEGIN END;

output          ::=     expression
                |       TEXTCONST
                |       SKIP;

output_list     ::=     output 
                |       output_list COMMA output;

input_list      ::=     variable
                |       input_list COMMA variable;

type            ::=     INTEGER 
                |       BOOLEAN;

argument_list   ::=     expression
                |       argument_list COMMA expression;

parameter       ::=     type parametername;

parameter_list  ::=     parameter
                |       parameter_list COMMA parameter;

atom            ::=     IDENT                                                           // Variable name or procedure call
                |       IDENT L_PAREN argument_list R_PAREN                             // Function call
                |       INTCONST
                |       TRUE 
                |       FALSE
                |       L_PAREN L6exp R_PAREN                                           // Any expression enclosed in parentheses
                |       L_CURLEY statement_list YIELDS expression R_CURLEY;             // Yields expression   
    
// According to language description, operators are layered into 7 different levels based on their precedence.
    
// Expressions created using up to level 0 operators (unary minus)

L0exp           ::=     atom 
                |       MINUS L0exp;

// Expressions created using up to level 1 operators (multiplication and division)            

L1exp           ::=     L0exp
                |       L1exp TIMES L0exp 
                |       L1exp DIVIDE L0exp;

// Expressions created using up to level 2 operators (addition and subtraction)

L2exp           ::=     L1exp
                |       L2exp PLUS L1exp 
                |       L2exp MINUS L1exp;

// Expressions created using up to level 3 operators (comparison)

L3exp           ::=     L2exp EQUAL L2exp
                |       L2exp NOT EQUAL L2exp
                |       L2exp LESS L2exp
                |       L2exp LESS EQUAL L2exp
                |       L2exp GREATER L2exp
                |       L2exp GREATER EQUAL L2exp
                |       L2exp;

// Expressions created using up to level 4 operators (negation)            

L4exp           ::=     L3exp 
                |       NOT L4exp;

// Expressions created using up to level 5 operators (conjunction)

L5exp           ::=     L4exp 
                |       L5exp AND L4exp;

// Expressions created using up to level 6 operators (disjunction)            

L6exp           ::=     L5exp 
                |       L6exp OR L5exp;

expression      ::=     L6exp;

integer         ::=     INTCONST;

functionname    ::=     IDENT;

procedurename   ::=     IDENT;

parametername   ::=     IDENT;
